@model FustWebApp.Models.Domain.Supplier
@using FustWebApp.Models;
@using FustWebApp.Models.Domain

@{
	var fustCheckBoxList = (List<CheckBoxModel>)ViewBag.FustTypeCheckboxes;
	var groupCheckboxes = (List<CheckBoxModel>)ViewBag.GroupsCheckBoxes;
	var action = string.Empty;
	bool editSupplier = false;

	@if (ViewBag.editSupplier == "true")
	{
		action = "Edit details for";
		editSupplier = true;
	}
	else
	{
		editSupplier = false;
		action = "View details for";
	}
	ViewData["Title"] = $"{action} {@ViewBag.SupplierName}";
	Layout = "~/Views/Shared/_AdminLayout.cshtml";

}


<div class=" d-flex flex-row flex-row-reverse mx-3">
	@if (User.IsInRole("Admin"))
	{
		@if (!editSupplier)
		{
			<a class="btn btn-danger" href="@Model.Id?editSupplier=true">Edit</a>
		}

	}
</div>

@using (@Html.BeginForm("Edit", "Suppliers", FormMethod.Post))
{
	@Html.AntiForgeryToken()
	<div class="container w-75">
		@Html.ValidationSummary(true,"",new{@class = "text-danger"})
		@Html.HiddenFor(model=>model.Id)
		<div class="row mb-3">
			@Html.LabelFor(model=>model.SupplierName,htmlAttributes:new{@class ="col-form-label col-sm-2"})
			<div class="col-auto">
				@if (editSupplier)
				{
					@Html.EditorFor(model => model.SupplierName, new { htmlAttributes = new { @class = "form-control mb-2" } })
				}
				else
				{
					@Html.EditorFor(model => model.SupplierName, new { htmlAttributes = new { @class = "form-control mb-2",@disabled="disabled" } })
				}
				@Html.ValidationMessageFor(model => model.SupplierName, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="row mb-3">
			@Html.LabelFor(model=>model.SupplierOrigin,htmlAttributes:new{@class ="col-form-label col-sm-2"})
			<div class="col-auto">
				@if (editSupplier)
				{
					@Html.DropDownListFor(model => model.SupplierOrigin,new SelectList(ViewBag.Origins),new { @class = "form-select mb-2" } )
				}
				else
				{
					@Html.DropDownListFor(model => model.SupplierOrigin,new SelectList(ViewBag.Origins),new { @class = "form-select mb-2",@disabled="disabled" } )
				}
				@Html.ValidationMessageFor(model => model.SupplierOrigin, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="row mb-3 ">
			@Html.LabelFor(model=>model.SupplierAddress,htmlAttributes:new{@class ="col-form-label col-sm-2"})
			<div class="col-sm-5">
				@if (editSupplier)
				{
					@Html.EditorFor(model => model.SupplierAddress, new { htmlAttributes = new { @class = "form-control col-sm-5 mb-2" } })
				}
				else
				{
					@Html.EditorFor(model => model.SupplierAddress, new { htmlAttributes = new { @class = "form-control col-sm-5 mb-2",@disabled="disabled" } })
				}
				@Html.ValidationMessageFor(model => model.SupplierAddress, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="row mb-3  align-items-center ">
			@Html.LabelFor(model=>model.SupplierGroup,htmlAttributes:new{@class ="col-form-label col-sm-2"})
			<div class="col-auto mb-2">
				@for (int i = 0; i < groupCheckboxes.Count; i++)
				{
					if (Model.SupplierGroup.Split(',').Contains(groupCheckboxes[i].CheckBoxName))
					{
						@if (editSupplier)
						{
							<input class="form-check-input" name="GroupChecked" type="checkbox" checked="checked" value="@groupCheckboxes[i].CheckBoxName" />
						}
						else
						{
							<input class="form-check-input" name="GroupChecked" type="checkbox" checked="checked" disabled value="@groupCheckboxes[i].CheckBoxName" />
						}
						@groupCheckboxes[i].CheckBoxName
						<br />
					}
					else
					{
						@if (editSupplier)
						{
							<input class="form-check-input" name="GroupChecked" type="checkbox" value="@groupCheckboxes[i].CheckBoxName" />	@groupCheckboxes[i].CheckBoxName
						}
						else
						{
							<input class="form-check-input" name="GroupChecked" type="checkbox" disabled value="@groupCheckboxes[i].CheckBoxName" />	@groupCheckboxes[i].CheckBoxName
						}
						<br />
					}
				}
				@Html.ValidationMessageFor(model => model.SupplierGroup, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="row mb-3 align-items-center">
			@Html.LabelFor(model=>model.FustTypeList,htmlAttributes:new{@class ="col-form-label col-sm-2"} )
			<div class="col-auto mb-2">
				@for (int i = 0; i < fustCheckBoxList.Count; i++)
				{
					@if (Model.FustTypeList.Split(',').Contains(fustCheckBoxList[i].CheckBoxName))
					{
						@if (editSupplier)
						{
							<input class="form-check-input" name="FustTypeChecked" type="checkbox" checked="checked" value="@fustCheckBoxList[i].CheckBoxName" />
						}
						else
						{
							<input class="form-check-input" name="FustTypeChecked" type="checkbox" disabled checked="checked" value="@fustCheckBoxList[i].CheckBoxName" />
						}
						@fustCheckBoxList[i].CheckBoxName
						<br />
						@Html.ValidationMessageFor(model => model.FustTypeList, "", new { @class = "text-danger" })
					}
					else
					{
						@if (editSupplier)
						{
							<input class="form-check-input" name="FustTypeChecked" type="checkbox" value="@fustCheckBoxList[i].CheckBoxName" />
						}
						else
						{
							<input class="form-check-input" name="FustTypeChecked" disabled type="checkbox" value="@fustCheckBoxList[i].CheckBoxName" />
						}
						@fustCheckBoxList[i].CheckBoxName
						<br />
						@Html.ValidationMessageFor(model => model.FustTypeList, "", new { @class = "text-danger" })
					}
				}
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				@if (editSupplier)
				{
					<input type="submit" value="Save" name="Save" class="btn btn-primary" />
					<input type="submit" value="Delete" name="Delete" class="btn btn-danger" />
				}
			</div>
		</div>
	</div>
}


@if (ViewBag.SupplierLoads != null && editSupplier == false)
{
	<div class="container mt-5 mb-3 align-items-xxl-center w-50 text-sm-center">
		<h2>@Model.SupplierName Load list</h2>
	</div>
	<table class="table">
		<thead class="table-dark text-sm-center  sticky-top">
			<tr>
				<th>Load Id</th>
				<th>Load Type</th>
				<th>Date</th>
				<th>Group</th>
				<th>Trailer Number</th>
				<th>Comment</th>
				<th>Created Date</th>
				<th></th>
			</tr>
		</thead>
		<tbody class="text-sm-center">
			@if (ViewBag.SupplierLoads.Count > 0)
			{
				@foreach (var item in ViewBag.SupplierLoads as IEnumerable<Loads>)
				{
					<tr>
						<td>@item.LoadId</td>
						<td>@item.LoadType</td>
						<td>@item.LoadDate.ToShortDateString()</td>
						<td>@item.LoadGroup</td>
						<td>@item.LoadTrailerNumber</td>
						<td>@item.LoadComment</td>
						<td>@item.CreatedDate</td>
						<td><a class="btn btn-primary" href="~/Admin/Load/ViewLoad/@item.LoadId">View</a></td>
					</tr>
				}
			}
			else
			{
				<tr>
					<td colspan="7" class="text-muted"><h4>No Loads Available for this supplier</h4></td>
				</tr>
			}
		</tbody>
	</table>
}
<div class="container mt-5 mb-3 align-items-xxl-center w-50 text-sm-center">
	<h2>@Model.SupplierName Stockholding</h2>
</div>
<table class="table">
	<thead class="table-dark sticky-top">
		<tr>
			<th>ID</th>
			<th>Fust Item</th>
			<th>Fust Type</th>
			<th>Stock Holding</th>
			<th>Supplier</th>
			<th>Date</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var item in ViewBag.StockHoldingList as IEnumerable<StockHolding>)
		{
			if (Model.FustTypeList.Contains(item.StockHoldingFustItems.FustType.FustTypeName))
			{
				var status = string.Empty;
				if (@item.StockHoldingQty < 0)
				{
					status = "negative";
				}
				else if (item.StockHoldingQty == 0)
				{
					status = "zero";
				}
				else
				{
					status = "positive";
				}

				<tr class="status" data-status=@status>
					<td>@item.StockHoldingId</td>
					<td>@item.StockHoldingFustItems.FustName</td>
					<td>@item.StockHoldingFustItems.FustType.FustTypeName</td>
					<td>@item.StockHoldingQty</td>
					<td>@item.StockHoldingSupplier.SupplierName</td>
					<td>@item.StockholdingDate.ToShortDateString()</td>
				</tr>
			}
		}
	</tbody>
</table>